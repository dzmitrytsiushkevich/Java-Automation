import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.*;

class PenTest {

    @ParameterizedTest
    @ValueSource(strings = {"12345", "", "123"})
    @DisplayName("Test that whole word is returned when word is <= 5, size letter 1, ink container 5")
    void write_shouldReturnWordForWordLessOrEqualThan5(String word) {
        Pen pen = new Pen(5, 1, "RED");
        assertEquals(word, pen.write(word));
    }

    @ParameterizedTest
    @ValueSource(strings = {"12", ""})
    @DisplayName("Test that whole word is returned when word is <= 2, size letter 2, ink container 5")
    void write_shouldReturnWordForSizeLetter2X(String word) {
        Pen pen = new Pen(5, 2, "RED");
        assertEquals(word, pen.write(word));
    }

    @ParameterizedTest
    @ValueSource(strings = {"12"})
    @DisplayName("Test that first word is written, second is written partly when word is <= 2, size letter 2, ink container 5")
    void write_shouldReturnWordPartWhenUsedTwice(String word) {
        Pen pen = new Pen(5, 2, "RED");
        pen.write(word);
        assertEquals(word, pen.write(word));
    }

    @ParameterizedTest
    @ValueSource(strings = {"123456"})
    @DisplayName("Test that part word is returned when word is > 5, size letter 1, ink container 5")
    void write_shouldReturnPartOfWordForWordMoreThan5(String word) {
        Pen pen = new Pen(5, 1, "RED");
        assertEquals(word.substring(0,5), pen.write(word));
    }

    @ParameterizedTest
    @ValueSource(strings = {"RED", "BLUE", "YELLOW"})
    @DisplayName("Test that proper color is returned")
    void getColor(String color) {
        Pen pen = new Pen(10, 1, color);
        assertEquals(color, pen.getColor());
    }

    @ParameterizedTest
    @ValueSource(ints = {1, Integer.MAX_VALUE})
    @DisplayName("Test that True is returned when In container is > 0")
    void isWork_shouldReturnTrueForPostiveParams(int number) {
        Pen pen = new Pen(number);
        assertTrue(pen.isWork());
    }

    @ParameterizedTest
    @ValueSource(ints = {0, -1, Integer.MIN_VALUE})
    @DisplayName("Test that False is returned when In container is <= 0")
    void isWork_shouldReturnFalseForNegativeParamsAndZero(int number) {
        Pen pen = new Pen(number);
        assertFalse(pen.isWork());
    }

}